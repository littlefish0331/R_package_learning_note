m <- addTiles(m)
m <- addMarkers(m, lng = 121.56481, lat = 25.03369, popup = "Taipei 101")
m
leafletOptions()
# Set value for the minZoom and maxZoom settings.
# 透過參數 minZoom = 0, maxZoom = 18，可以限制初始使用者的畫面，以及最大的縮放程度。
leaflet(options = leafletOptions(minZoom = 4, maxZoom = 18)) %>% addTiles()
# add some circles to a map
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(data = df) %>% addCircles()
# ---
leaflet(df) %>% addCircles(lng = ~Long, lat = ~Lat)
# ---
leaflet() %>% addCircles(data = df)
leaflet() %>% addCircles(data = df, lat = ~ Lat, lng = ~ Long)
library(sp)
Sr1 = Polygon(cbind(c(2, 4, 4, 1, 2), c(2, 3, 5, 4, 2))) #四邊形，頭尾的點要相同。
Sr2 = Polygon(cbind(c(5, 4, 2, 5), c(2, 3, 2, 2))) #三角形，頭尾的點要相同。
Sr3 = Polygon(cbind(c(4, 4, 5, 10, 4), c(5, 3, 2, 5, 5)))
Sr4 = Polygon(cbind(c(5, 6, 6, 5, 5), c(4, 4, 3, 3, 4)), hole = TRUE) #小正方形
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr3), "s3/4")
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
# help(package='maps'): 可以看有那些資料庫可以使用。沒有台灣
library(maps)
# mapStates = map(database = "state", fill = TRUE, plot = TRUE)
mapStates = map(database = "state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(n = 100, min = 5, max = 20),
color = sample(x = colors(), size = 100, replace = T)
)
m = leaflet(data = df) %>% addTiles()
m %>% addCircleMarkers(lng = ~lng, lat = ~lat,
radius = ~size,
color = ~color, #線的顏色
stroke = F, #線(邊框)是否要顯示
# weight = 10, #線的粗細
# opacity = 0.1, #線的透明度
fillColor = ~color,
fillOpacity = 1,
fill = T)
m %>% addCircleMarkers(lng = ~lng, lat = ~lat,
radius = runif(n = 100, min = 4, max = 10),
color = c('red'))
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addTiles()
# ---
# tmaptools::geocode_OSM("taipei") #121.56368  25.03752
m <- leaflet() %>% setView(lng = 121.56368, lat = 25.03752, zoom = 12)
m %>% addTiles()
# F1，可以從連結去看更多的底圖選項。或是在$後面按下tab鍵。
# 注意有些圖層的縮放有限，放太大會顯示 map data not available
m %>% addProviderTiles(provider = providers$Stamen.Toner)
m %>% addProviderTiles(provider = providers$CartoDB.Positron)
m %>% addProviderTiles(provider = providers$Esri.NatGeoWorldMap)
# transparent(透明)
leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 4) %>%
addWMSTiles(
baseUrl = "http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.3)) %>%
addProviderTiles(providers$Stamen.TonerLabels)
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(lng = ~long, lat = ~lat,
# icon = icons("./72px.png", iconWidth = 30), #icon可以使用自訂的，可為url
popup = ~as.character(mag), #控制點擊後的訊息視窗。
label = ~as.character(mag)) #控制滑鼠移動過去顯示的文字。
greenLeafIcon <- makeIcon(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(lng = ~long, lat = ~lat,
icon = greenLeafIcon)
quakes1 <- quakes[1:10,]
# icons()和makeIcon()，其實都可以。
leafIcons <- icons(
iconUrl = ifelse(quakes1$mag < 4.6,
"http://leafletjs.com/examples/custom-icons/leaf-green.png",
"http://leafletjs.com/examples/custom-icons/leaf-red.png"
),
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes1) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = leafIcons)
# Make a list of icons. We'll index into it based on name.
oceanIcons <- iconList(
ship = makeIcon("ferry-18.png", "ferry-18@2x.png", 18, 18),
pirate = makeIcon("danger-24.png", "danger-24@2x.png", 24, 24)
)
# Some fake data
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = ifelse(runif(20) > 0.75, "pirate", "ship") #比較簡單的寫法
# data.frame(type = factor(
#   x = ifelse(runif(20) > 0.75, "pirate", "ship"),
#   levels = c("ship", "pirate"))
)
)
leaflet(df) %>% addTiles() %>%
# Select from oceanIcons based on df$type
addMarkers(icon = ~oceanIcons[type], label = ~type)
# first 20 quakes
df.20 <- quakes[1:20,]
getColor <- function(quakes) {
sapply(quakes$mag, function(mag) {
if(mag <= 4) {"green"}
else if(mag <= 5) {"orange"}
else {"red"}
})
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(lng = ~long, lat = ~lat,
icon = icons, label = ~as.character(mag))
leaflet(quakes) %>% addTiles() %>%
addMarkers(
lng = ~long, lat = ~lat,
clusterOptions = markerClusterOptions()
)
leaflet(df) %>% addTiles() %>% addCircleMarkers()
# Create a palette that maps factor levels to colors
pal <- colorFactor(c("navy", "red"), domain = c("ship", "pirate"))
leaflet(df) %>% addTiles() %>%
addCircleMarkers(
radius = ~ifelse(type == "ship", 6, 10),
color = ~pal(type),
stroke = F,
fillOpacity = 0.5
)
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
# ---
# tmaptools::geocode_OSM("National Center for High-performance Computing")
# 120.99560  24.78261
content <- paste(sep = "<br/>",
"<b><a href='https://www.nchc.org.tw/'>NCHC</a></b>",
"No. 7, R&D 6th Rd.",
"SHsinchu Science Park, Hsinchu City",
"Taiwan, R.O.C. 30076"
)
leaflet() %>% addTiles() %>%
addPopups(
lng = 120.99560,
lat = 24.78261,
popup = content,
options = popupOptions(closeButton = FALSE)
)
library(htmltools)
df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"
))
leaflet(df) %>% addTiles() %>%
addMarkers(lng = ~Long, lat = ~Lat, popup = ~htmlEscape(Name))
library(htmltools)
df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"))
leaflet(df) %>% addTiles() %>%
addMarkers(~Long, ~Lat, label = ~htmlEscape(Name), )
# Change Text Size and text Only and also a custom CSS
leaflet() %>% addTiles() %>% setView(-118.456554, 34.09, 13) %>%
addMarkers(
lng = -118.456554, lat = 34.105,
label = "Default Label",
labelOptions = labelOptions(noHide = T)) %>%
addMarkers(
lng = -118.456554, lat = 34.095,
label = "Label w/o surrounding box",
labelOptions = labelOptions(noHide = T, textOnly = TRUE)) %>%
addMarkers(
lng = -118.456554, lat = 34.085,
label = "label w/ textsize 15px",
labelOptions = labelOptions(noHide = T, textsize = "15px")) %>%
addMarkers(
lng = -118.456554, lat = 34.075,
label = "Label w/ custom CSS style",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "12px",
"border-color" = "rgba(0,0,0,0.5)"
))
)
# tmaptools::geocode_OSM("National Center for High-performance Computing")
# 120.99560  24.78261
# ---
# addMarkers - label: 沒辦法像 參數popup，直接用 css語法，而是要在 參數style 做設定。
# markerOptions: 控制marker的各種顯示方式。
# popupOptions - keepInView: TRUE。popup資訊不會因為，用戶平移地圖而移出地圖邊界外。
# popupOptions - maxWidth: px。popup資訊的框框最大寬度。
# popupOptions - minWidth: px。popup資訊的框框最小寬度。
# popupOptions - maxHeight: px。popup資訊的框框最大高度。
# popupOptions - autoPan: 如果希望以平移動畫打開的popup，設置為TRUE。預設為TRUE
# popupOptions - closeButton: 關閉popup的按鈕是否顯示。
# popupOptions - closeOnClick: 是否點擊地圖其他地方，就可關閉popup。
# labelOptions - noHide、permanent: label是否要常駐顯示。
# labelOptions - textOnly: label框框是否要隱藏。
# labelOptions - textsize: px。label字體大小。
# labelOptions - direction: Direction where to open the tooltip. Possible values are: right, left, top, bottom, center, auto. auto will dynamically switch between right and left according to the tooltip position on the map.
# labelOptions - opacity: 0~1。label字透明度。
# labelOptions - sticky: label是否跟著滑鼠移動。
content <- paste(sep = "<br/>",
"<b><a href='https://www.nchc.org.tw/'>NCHC</a></b>",
"No. 7, R&D 6th Rd.",
"SHsinchu Science Park, Hsinchu City",
"Taiwan, R.O.C. 30076"
)
leaflet(options = leafletOptions(minZoom = 12)) %>%
addTiles() %>%
setView(lng = 120.99560, lat = 24.78261, zoom = 16) %>%
addMarkers(
lng = 120.99560, lat = 24.78261,
icon = leaflet::icons(iconUrl = "./72px.png", iconRetinaUrl = "./24px.png",
iconAnchorX = 10, iconAnchorY = 30),
options = markerOptions(draggable = T, interactive = T),
popup = content,
popupOptions = popupOptions(keepInView = T),
label = "NCHC",
labelOptions = labelOptions(
noHide = T,
textOnly = TRUE,
textsize = "30px",
direction = "bottom",
style = list(
"color" = "red",
"font-family" = "Consolas, Courier New, monospace, Microsoft JhengHei",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "20px",
"border-color" = "rgba(0,0,0,0.5)"
)
)
)
leaflet(options = leafletOptions(minZoom = 12)) %>%
addTiles() %>%
setView(lng = 120.99560, lat = 24.78261, zoom = 16) %>%
addLabelOnlyMarkers(
lng = 120.99560, lat = 24.78261,
label = "NCHC",
labelOptions = labelOptions(
noHide = T,
textOnly = TRUE,
textsize = "30px",
direction = "bottom",
style = list(
"color" = "red",
"font-family" = "Consolas, Courier New, monospace, Microsoft JhengHei",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "20px",
"border-color" = "rgba(0,0,0,0.5)"
)
)
)
library(rgdal)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
# 上面的資料源失效了，請到
# Census.gov > Browse By Topic > Geography > Geographies >
# Geography Mapping Files > More:2013 > Cartographic Boundary Files - Shapefile(CB) >
# 2013 > States > cb_2013_us_state_20m.zip
states <- readOGR("../data/census_gov/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m", GDAL1_integer64_policy = TRUE)
library(rgdal)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
# 上面的資料源失效了，請到
# Census.gov > Browse By Topic > Geography > Geographies >
# Geography Mapping Files > More:2013 > Cartographic Boundary Files - Shapefile(CB) >
# 2013 > States > cb_2013_us_state_20m.zip
states <- readOGR("../data/census_gov/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m", GDAL1_integer64_policy = TRUE)
# 代碼的部分請看
# https://www2.census.gov/geo/pdfs/maps-data/data/tiger/tgrshp2013/
# TGRSHP2013_TechDoc_A.pdf
# ALAND: 單位推論是平方公尺。
# ---
# states %>% names()
# glimpse(states)
# states@data %>% head
data.table(NAME = states$NAME,
STUSPS = states$STUSPS,
ALAND = states$ALAND)
neStates <- subset(states, states$STUSPS %in% c(
"CT","ME","MA","NH","RI","VT","NY","NJ","PA"
))
# 參數palette: 可有四種來源名稱填入，
# 然後這個函數的使用蠻奇特的，學一下~
RColorBrewer::brewer.pal.info
colorQuantile(palette = "YlOrRd", domain = neStates$ALAND)(neStates$ALAND)
# ---
# 有一些不錯的參數可以調整
# addPolygons - dashArray: 線條樣式參數。
# 還有
# noClip、popup、popupOptions、label、labelOptions
# options = pathOptions、highlightOptions
leaflet(neStates) %>%
addPolygons(
color = "#444444", #stroke color
weight = 1, #區塊邊界的粗細
opacity = 1.0, #區塊邊界的透明度
smoothFactor = 0.5, #地圖區塊的邊界簡化程度。數字越大，地圖簡化越多，但是性能也越好。會隨著縮放做改變。
fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
fillOpacity = 0.5, #區塊顏色的透明度
popup = (neStates$ALAND/1000000) %>% round %>%
paste(as.character(neStates$NAME), "<br>", ., "km^2"),
label = as.character(neStates$STUSPS),
highlightOptions = highlightOptions(
color = "white",
weight = 2,
bringToFront = TRUE))
# remotes::install_github("hrbrmstr/albersusa")
library(albersusa)
# ---
fullsize <- usa_sf()
object.size(fullsize)
# ---
simplified <- rmapshaper::ms_simplify(fullsize)
object.size(simplified)
cities <- read.csv(textConnection("
City,Lat,Long,Pop
Boston,42.3601,-71.0589,645966
Hartford,41.7627,-72.6743,125017
New York City,40.7127,-74.0059,8406000
Philadelphia,39.9500,-75.1667,1553000
Pittsburgh,40.4397,-79.9764,305841
Providence,41.8236,-71.4222,177994
"))
cities
leaflet(cities) %>% addTiles() %>%
addCircles(
lng = ~Long, lat = ~Lat,
weight = 1, #圓圈的邊框
radius = ~sqrt(Pop) * 30, popup = ~City
)
leaflet() %>% addTiles() %>%
addRectangles(
lng1=-118.456554, lat1=34.078039,
lng2=-118.436383, lat2=34.062717,
fillColor = "transparent" #設置成透明的小技巧。
)
# 資料有點大，所以我後來有把 new york 的資料另外拉出。
# ---
# 去stackoverflow上找答案
xy <- geojsonio::geojson_read("../data/gz_2010_us_050_00_500k.json", what = "sp")
# xy %>% str
names(xy)
# [1] "GEO_ID"     "STATE"      "COUNTY"     "NAME"       "LSAD"       "CENSUSAREA"
# xy$STATE %>% unique() #52州
# xy$COUNTY %>% unique() #325個縣
# from Wikipedia list of counties, find Genesse county(傑納西縣, aka密西根州),
# which should be located in NY state
xy[grepl("36037", xy$GEO_ID), ]$STATE
# [1] 36
# NY state should be number 36
nyc <- xy[xy$STATE == 36, ]
leaflet(nyc) %>%
addTiles() %>%
addPolygons()
# ---
# geojsonio::geojson_write(input = nyc, file = "../data/nycounties") #預設會儲存 .geojson
# 資料比較小，讀取比較快!!
nycounties <- geojsonio::geojson_read("../data/nycounties.geojson", what = "sp")
# nyc <- sf::read_sf("../data/nycounties.geojson") #也是OK
leaflet(data = nycounties) %>%
addTiles() %>%
addPolygons()
nycounties <- geojsonio::geojson_read("../data/nycounties.geojson", what = "sp")
pal <- colorNumeric("viridis", NULL)
leaflet(nycounties) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(pop)),
label = ~paste0(county, ": ", formatC(pop, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(pop), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
# ---
# 另一個資料源，所以和tutorial有點出入
nycounties <- geojsonio::geojson_read("../data/nycounties01.geojson", what = "sp")
# - smoothFactor:
# how much to simplify the polyline on each zoom level (more means better performance and less accurate representation)。
# 每個縮放級別可簡化多段線多少（更多意味著更好的性能和更不准確的表示）
pal <- colorNumeric("viridis", NULL)
# leaflet(data = nycounties) %>%
leaflet(nycounties) %>%
addTiles() %>%
addPolygons(
stroke = TRUE, #地圖區塊邊界是否出現
color = "#444444", #stroke color
weight = 1, #區塊邊界的粗細
opacity = 1.0, #區塊邊界的透明度
highlightOptions = highlightOptions(
color = "white",
weight = 1,
opacity = 1,
bringToFront = TRUE),
smoothFactor = 0.3, #地圖區塊的邊界簡化程度。數字越大，地圖簡化越多，但是性能也越好。會隨著縮放做改變。
fillOpacity = 1, #地圖區塊填色的透命度。
fillColor = ~pal(CENSUSAREA),
label = ~paste0(NAME, ": ", formatC(CENSUSAREA, big.mark = ","))) %>%
addLegend(pal = pal,
values = ~CENSUSAREA, #vales也可以直接在這裡轉換。
opacity = 1.0, #legend色調的透明度。
labFormat = labelFormat(transform = function(x) x)) #把vales放進這裡做轉換。
topoData <- readLines("../data/states-10m.json") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
# ---
topoData <- readLines("../data/us-10m.json") %>% paste(collapse = "\n")
topoData <- readLines("../data/states-10m.json") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
# ---
topoData <- readLines("../data/us-10m.json") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
library(jsonlite)
# From http://data.okfn.org/data/datasets/geo-boundaries-world-110m
geojson <- readLines("../data/countries.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
# Default styles for all features
geojson$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
# Gather GDP estimate from all countries
gdp_md_est <- sapply(geojson$features, function(feat) {
feat$properties$gdp_md_est
})
# Gather population estimate from all countries
pop_est <- sapply(geojson$features, function(feat) {
max(1, feat$properties$pop_est)
})
# Color by per-capita GDP using quantiles
pal <- colorQuantile("Greens", gdp_md_est/pop_est)
# Add a properties$style list to each feature
geojson$features <- lapply(geojson$features, function(feat) {
feat$properties$style <- list(
fillColor = pal(
feat$properties$gdp_md_est / max(1, feat$properties$pop_est)
)
)
feat
})
# Add the now-styled GeoJSON object to the map
leaflet() %>% addGeoJSON(geojson)
library(rgdal)
library(leaflet)
# From http://data.okfn.org/data/datasets/geo-boundaries-world-110m
countries <- readOGR("../data/countries.geojson")
map <- leaflet(countries) %>% addTiles()
pal <- colorNumeric(
palette = "YlGnBu",
domain = countries$gdp_md_est
)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(gdp_md_est)
) %>%
addLegend(position = "bottomright",
pal = pal, values = ~gdp_md_est,
title = "Est. GDP (2010)",
labFormat = labelFormat(prefix = "$"),
opacity = 1 #圖例的透明度
)
