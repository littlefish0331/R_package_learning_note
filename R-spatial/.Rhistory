philly_sf %>% dim() #
# dimension: 3886 27(9+18)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
head()
philly_homicides_sf_aea %>% head
philly_homicides_sf_aea %>% dim # 3883 9
# actually, philly_sf has attribute - Shape_area
# it almost equal to tract_area.
# unit: sqare meter
# ---
# philly_sf %>% head()
# philly_sf %>% dim() #384 18
# ---
# st_crs(philly_sf) #unit=m
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
head()
philly_homicides_sf_aea %>% head
# philly_homicides_sf_aea %>% dim # 3883 9
philly_sf %>% names()
philly_homicides_sf_aea %>% names
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>% names
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
head()
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
head() %>% View()
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
head() -> tmptmp
tmptmp$geometry
tmptmp$geometry[1]
st_join
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(x = philly_homicides_sf_aea) %>%
head()
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(y = philly_homicides_sf_aea) %>%
head()
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(x = ., y = philly_homicides_sf_aea) %>% View()
philly_homicides_sf_aea %>% names
philly_homicides_sf_aea %>% dim()
philly_homicides_sf_aea$iid <- 1:3883
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(x = ., y = philly_homicides_sf_aea) -> tmptmp
tmptmp %>% dim
tmptmp$iid %>% table %>% sort(., decreasing = T)
tmptmp$iid %>% table %>% sort(., decreasing = T) %>% head
tmptmp %>% View()
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(y = ., x = philly_homicides_sf_aea) %>% dim
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(y = ., x = philly_homicides_sf_aea) -> tmptmp1
tmptmp1$iid %>% table %>% sort(., decreasing = T)
tmptmp1$iid %>% table %>% sort(., decreasing = T) %>% head
tmptmp1 %>% View()
tmptmp1$iid %>% table %>% .[.==2]
tmptmp$iid %>% table %>% .[.==2]
all.equal(tmptmp1$iid %>% table, tmptmp$iid %>% table)
tmptmp %>% View()
which(!(tmptmp$iid %in% tmptmp1$iid))
tmptmp$iid[96]
tmptmp1 %>% View()
which(!(tmptmp1$iid %in% tmptmp$iid))
# dimension: 3886 27(9+18-1+1)
philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(y = ., x = philly_homicides_sf_aea) %>%
head()
# 原始版本的 unique 會出錯，因為 tract_area 計算出來的面積大小可能有誤差。
# 雖然結果顯示 homic_rate 為[1/m^2]，但實際上我們已經轉換為[1/km^2]
crime_rate <- philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
group_by(GEOID10) %>%
summarize(n_homic = n(),
tract_area = tract_area[1],
homic_rate = n_homic/tract_area * 1e6)
plot(crime_rate)
plot(crime_rate[, "homic_rate"], main = "homic_rate[1/km^2]")
crime_rate
# ---
crime_rate$homic_rate <- crime_rate$homic_rate %>% round(., digits = 5)
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", delete_layer = T)
# 原始版本的 unique 會出錯，因為 tract_area 計算出來的面積大小可能有誤差。
# 雖然結果顯示 homic_rate 為[1/m^2]，但實際上我們已經轉換為[1/km^2]
crime_rate <- philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
group_by(GEOID10) %>%
summarize(n_homic = n(),
tract_area = tract_area[1],
homic_rate = n_homic/tract_area * 1e6)
plot(crime_rate)
plot(crime_rate[, "homic_rate"], main = "homic_rate[1/km^2]")
# 會爆出一堆eror
# 這些error在GDAL驅動程序中，因此無法通過sf進行更改
# 主要是數值轉換上的問題(我其實也沒有很懂XD)
# - [st_write: values not successfully written · Issue #69 · HeritageNetwork/Regional_SDM](https://github.com/HeritageNetwork/Regional_SDM/issues/69)
# - [Misleading warning · Issue #306 · r-spatial/sf](https://github.com/r-spatial/sf/issues/306)
# - [#6803 (ogr2ogr complains possibly due to too larger number) – GDAL](https://trac.osgeo.org/gdal/ticket/6803)
# ---
# 總之，這個錯誤無法解決
# 也許建議之後逐漸淘汰 shpafile 的作法(?)
# 聽說新的資料交換格式是 Geojson 啦~
# ---
# crime_rate$homic_rate <- crime_rate$homic_rate %>% round(., digits = 5)
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", delete_layer = T, update = T)
# ---
crime_rate$homic_rate <- crime_rate$homic_rate %>% round(., digits = 5)
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", delete_layer = T, update = T)
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", update = T)
View(crime_rate)
# ---
# crime_rate$homic_rate <- crime_rate$homic_rate %>% round(., digits = 5)
crime_rate$GEOID10 <- crime_rate$GEOID10/1000
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", update = T)
crime_rate$GEOID10 %>% head()
# 原始版本的 unique 會出錯，因為 tract_area 計算出來的面積大小可能有誤差。
# 雖然結果顯示 homic_rate 為[1/m^2]，但實際上我們已經轉換為[1/km^2]
crime_rate <- philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
group_by(GEOID10) %>%
summarize(n_homic = n(),
tract_area = tract_area[1],
homic_rate = n_homic/tract_area * 1e6)
crime_rate$GEOID10 %>% head
# ---
crime_rate$GEOID10 %>% head
(crime_rate$GEOID10 %/% 1000) %>% table()
(crime_rate$GEOID10 %% 1000) %>% table()
# ---
crime_rate$GEOID10 %>% class
# ---
# 轉換成 character，就解決問題
crime_rate$GEOID10 <- crime_rate$GEOID10 %>% as.character()
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", update = T)
# ---
# 轉換成 character，就解決問題
crime_rate$GEOID10 <- crime_rate$GEOID10 %>% as.character()
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", update = T)
# ---
# 轉換成 character，也無法解決問題，因為存檔會自動判讀為數值
# 先除以 10000，可以成功儲存。
crime_rate$GEOID10 <- crime_rate$GEOID10 / 10000
# 原始版本的 unique 會出錯，因為 tract_area 計算出來的面積大小可能有誤差。
# 雖然結果顯示 homic_rate 為[1/m^2]，但實際上我們已經轉換為[1/km^2]
crime_rate <- philly_sf %>%
mutate(tract_area = st_area(geometry)) %>%
st_join(philly_homicides_sf_aea) %>%
group_by(GEOID10) %>%
summarize(n_homic = n(),
tract_area = tract_area[1],
homic_rate = n_homic/tract_area * 1e6)
# ---
# 轉換成 character，也無法解決問題，因為存檔會自動判讀為數值
# 先除以 10000，可以成功儲存。
crime_rate$GEOID10 <- crime_rate$GEOID10 / 10000
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", update = T)
# 拿哪一個變量都可以，因為我們只是算 length
philly_homicides_sp_aea %>% names
# ---
ph_hom_count_sp <- aggregate(x = philly_homicides_sp_aea["OBJ_ID"],
by = philly_sp, FUN = length)
# make sure we understand this error message:
# aggregate(x = philly_homicides_sp_aea, by = philly_sp, FUN = length)
aggregate(x = philly_homicides_sp_aea, by = philly_sp, FUN = length)
philly_homicides_sp_aea %>% dim
class(ph_hom_count_sp)
names(ph_hom_count_sp)
head(ph_hom_count_sp)
gArea(ph_hom_count_sp, byid = T) %>% head()
library(rgeos)
gArea(ph_hom_count_sp, byid = T) %>% head()
# we multiply by by 1000000 to get sq km.
ph_hom_count_sp$homic_dens <- 1e6 * (ph_hom_count_sp$OBJ_ID/gArea(ph_hom_count_sp,
byid = TRUE))
hist(ph_hom_count_sp$homic_dens)
plot(ph_hom_count_sp)
plot(ph_hom_count_sp[which(ph_hom_count_sp$homic_dens>20),], col = "red", add = T)
ph_hom_count_sp %>% head
writeOGR(obj = ph_hom_count_sp,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sp",
driver = "ESRI Shapefile", overwrite_layer = T)
philly_crimes_sf <-  st_read(dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
quiet = TRUE)
plot(philly_crimes_sf)
# error!! because this is a numeric vector!
plot(philly_crimes_sf$homic_rate)
# because this is a numeric vector!
plot(philly_crimes_sf$homic_rate)
philly_crimes_sf$homic_rate %>% hist()
philly_crimes_sf %>% dim()
philly_crimes_sf <-  st_read(dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sp",
quiet = TRUE)
plot(philly_crimes_sf)
# because this is a numeric vector!
plot(philly_crimes_sf$homic_rate)
philly_crimes_sf <-  st_read(dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
quiet = TRUE)
plot(philly_crimes_sf)
# because this is a numeric vector!
plot(philly_crimes_sf$homic_rate)
crime_rate %>% dim
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", update = T)
philly_crimes_sf
crime_rate
philly_crimes_sf
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", update = T, delete_layer = T)
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", delete_layer = T)
st_write(obj = crime_rate,
dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
driver = "ESRI Shapefile", update = T, delete_layer = T)
philly_crimes_sf <-  st_read(dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
quiet = TRUE)
plot(philly_crimes_sf)
# because this is a numeric vector!
plot(philly_crimes_sf$homic_rate)
philly_crimes_sf
philly_crimes_sf %>% dim()
philly_crimes_sf[, "homic_rate"] %>% plot()
philly_crimes_sf$homic_rate %>% hist()
plot(philly_crimes_sf[, "homic_rate"],
main = "Philadelphia homicide density per square km",
breaks = "quantile")
library(RColorBrewer)
pal <- brewer.pal(7, "OrRd") # we select 7 colors from the palette
class(pal)
plot(philly_crimes_sf["homic_rate"],
main = "Philadelphia homicide density per square km",
breaks = "quantile", nbreaks = 7,
pal = pal)
philly_crimes_sp <- readOGR(dsn = "../data/PhillyCrimerate",
layer = "PhillyCrimerate_sf",
verbose = FALSE)
names(philly_crimes_sp)
# spplot(philly_crimes_sp) #繪製速度有點慢，且會把 attribute 的所有值，放到同一尺度
spplot(philly_crimes_sp, "homic_rate")
spplot(philly_crimes_sp, c("n_homic", "homic_rate")) #會放到同一尺度，可能要學習進階設定
library(classInt)
# quantile breaks
breaks_qt <- classIntervals(philly_crimes_sp$homic_rate, n = 7, style = "quantile")
br <- breaks_qt$brks
# 要包含上下界，所以擴充一點點
offs <- 0.0000001
br[1] <- br[1] - offs
br[length(br)] <- br[length(br)] + offs
# categoreis for choropleth map
philly_crimes_sp$homic_rate_bracket <- cut(philly_crimes_sp$homic_rate, br)
# plot
spplot(philly_crimes_sp, "homic_rate_bracket",
col.regions = pal,
main = "Philadelphia homicide density per square km")
library(ggplot2)
ggplot(data = my_data_frame,
mapping = aes(x = name_of_column_with_x_value,
y = name_of_column_with_y_value)) +
geom_point()
ggplot(philly_crimes_sf) +
geom_sf(aes(fill=homic_rate))
library(classInt)
# get quantile breaks. Add .00001 offset to catch the lowest value
breaks_qt <- classIntervals(var = c(min(philly_crimes_sf$homic_rate) - .00001,
philly_crimes_sf$homic_rate),
n = 7,
style = "quantile")
breaks_qt
# breaks_qt$brks #顯示每一個 interval 的下界。
# get quantile breaks. Add .00001 offset to catch the lowest value
breaks_qt <- classIntervals(var = c(min(philly_crimes_sf$homic_rate) - .00001,
philly_crimes_sf$homic_rate),
n = 5,
style = "quantile")
breaks_qt
# get quantile breaks. Add .00001 offset to catch the lowest value
breaks_qt <- classIntervals(var = c(min(philly_crimes_sf$homic_rate) - .00001,
philly_crimes_sf$homic_rate),
n = 7,
style = "quantile")
breaks_qt
philly_crimes_sf <- mutate(philly_crimes_sf,
homic_rate_cat = cut(homic_rate, breaks_qt$brks))
ggplot(philly_crimes_sf) +
geom_sf(aes(fill=homic_rate_cat)) +
scale_fill_brewer(palette = "OrRd")
library(ggmap)
# tmaptools::geocode_OSM("Philadelphia")
# Philadelphia Lon is -75.16522 and Lat 39.95258
# -75.28030  39.86700 -74.95583  40.13796
ph_basemap <- get_stamenmap(bbox  = c(left = -75.28030, bottom = 39.86700,
right = -74.95583, top = 40.13796),
zoom = 11,
maptype = 'terrain-background',
source = 'stamen')
ggmap(ph_basemap)
ggmap(ph_basemap) +
geom_sf(data = philly_crimes_sf,
aes(fill=homic_rate_cat),
inherit.aes = FALSE) +
scale_fill_brewer(palette = "OrRd")
st_crs(philly_crimes_sf) #和 tile 的 CRS 不相同。
ggmap(ph_basemap) +
geom_sf(data = philly_crimes_sf,
aes(fill = homic_rate_cat),
inherit.aes = FALSE) +
scale_fill_brewer(palette = "OrRd") +
coord_sf(crs = st_crs(4326))
library(tmap)
tm_shape(philly_crimes_sf) +
tm_polygons(col = "homic_rate",
style = "quantile",
title = "Philadelphia \nhomicide density \nper sqKm")
tm_shape(philly_crimes_sf) + ttm() +
tm_polygons(col = "homic_rate",
style = "quantile",
title = "Philadelphia \nhomicide density \nper sqKm")
ttm()
library(tmap)
tmap_mode(mode = "plot")
# tmap_mode(mode = "view")
tm_shape(philly_crimes_sf) +
tm_polygons(col = "homic_rate",
style = "quantile",
title = "Philadelphia \nhomicide density \nper sqKm")
library(leaflet)
# reproject
philly_WGS84 <- st_transform(philly_crimes_sf, crs = 4326)
leaflet(philly_WGS84) %>%
addPolygons()
pal_fun <- colorQuantile(palette = "YlOrRd", domain = NULL, n = 5)
p_popup <- paste0("<strong>Homicide Density: </strong>", philly_WGS84$homic_rate)
leaflet(philly_WGS84) %>%
addPolygons(
stroke = FALSE, # remove polygon borders
fillColor = ~pal_fun(homic_rate), # set fill color with function from above and value
fillOpacity = 0.8, smoothFactor = 0.5, # make it nicer
popup = p_popup)  # add popup
leaflet(philly_WGS84) %>%
addPolygons(
stroke = FALSE,
fillColor = ~pal_fun(homic_rate),
fillOpacity = 0.8, smoothFactor = 0.5,
popup = p_popup) %>%
addTiles()
leaflet(philly_WGS84) %>%
addPolygons(
stroke = FALSE,
fillColor = ~pal_fun(homic_rate),
fillOpacity = 0.8, smoothFactor = 0.5,
popup = p_popup) %>%
addTiles() %>%
addLegend(position = "bottomright",  # location
pal = pal_fun,    # palette function
values = ~homic_rate,  # value to be passed to palette function
opacity = 0.7,
title = 'Philadelphia homicide density per sqkm') # legend title
# 有七個區間
philly_WGS84$homic_rate_cat %>% unique() %>% str
leaflet(philly_WGS84) %>%
addPolygons(
stroke = FALSE,
fillColor = ~pal_fun(homic_rate),
fillOpacity = 0.8, smoothFactor = 0.5,
popup = p_popup) %>%
addTiles() %>%
addLegend("bottomright",
colors = brewer.pal(7, "YlOrRd"),
labels = paste0("up to ", format(x = breaks_qt$brks[-1], digits = 2)),
title =  'Philadelphia homicide density per sqkm')
breaks_qt
pal_fun <- colorQuantile(palette = "YlOrRd", domain = NULL, n = 7)
leaflet(philly_WGS84) %>%
addPolygons(
stroke = FALSE,
fillColor = ~pal_fun(homic_rate),
fillOpacity = 0.8, smoothFactor = 0.5,
popup = p_popup) %>%
addTiles() %>%
addLegend("bottomright",
colors = brewer.pal(7, "YlOrRd"),
labels = paste0("up to ", format(x = breaks_qt$brks[-1], digits = 2)),
title =  'Philadelphia homicide density per sqkm')
pal_fun <- colorQuantile(palette = "YlOrRd", domain = NULL, n = 7)
leaflet(philly_WGS84) %>%
addPolygons(
stroke = FALSE,
fillColor = ~pal_fun(homic_rate),
fillOpacity = 0.8, smoothFactor = 0.5,
popup = p_popup) %>%
addTiles() %>%
addLegend("bottomright", opacity = 0.7,
colors = brewer.pal(7, "YlOrRd"),
labels = paste0("up to ", format(x = breaks_qt$brks[-1], digits = 2)),
title =  'Philadelphia homicide density per sqkm')
leaflet(philly_WGS84) %>%
addPolygons(
stroke = FALSE,
fillColor = ~pal_fun(homic_rate),
fillOpacity = 0.8, smoothFactor = 0.5,
popup = p_popup,
group = "philly") %>%
addTiles(group = "OSM") %>%
addProviderTiles("CartoDB.DarkMatter", group = "Carto") %>%
addLegend("bottomright",
colors = brewer.pal(7, "YlOrRd"),
labels = paste0("up to ", format(breaks_qt$brks[-1], digits = 2)),
title = 'Philadelphia homicide density per sqkm') %>%
addLayersControl(baseGroups = c("OSM", "Carto"),
overlayGroups = c("philly"))
philly_crimes_sf %>% plot
rm(list = ls()); invisible(gc())
library(knitr)
library(dplyr)
library(sf)
library(sp)
library(rgdal)
library(raster)
library(rgeos)
library(classInt)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
library(tmap)
library(leaflet)
opts_chunk$set(echo = TRUE)
# if you need to read it in again
# verbose: report progress
philly_sp <- readOGR(dsn = "../data/Philly",
layer = "PhillyTotalPopHHinc",
verbose = T)
coords <- data.frame(x = 1750160, y = 467499.9) # set the coordinates
prj <- CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") # the projection string for AEA
philly_ctr_sp <- SpatialPoints(coords, proj4string = prj) # create the spatialPoints
# philly_ctr_sp %>% str
# philly_ctr_sp %>% plot()
# prj #敘述中有描述單位。+unit=m
philly_buf_sp <- gBuffer(spgeom = philly_ctr_sp, width=2000) # create buffer around center
# 單位為meter
# ---
# philly_buf_sp %>% plot()
# philly_buf_sp %>% str
philly_buf_intersects <-  gIntersects(spgeom1 = philly_buf_sp,
spgeom2 = philly_sp,
byid=TRUE)
# what kind of object is this?
class(philly_buf_intersects)# matrix
philly_buf_intersects
